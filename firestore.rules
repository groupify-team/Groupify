rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Verification codes collection - only Cloud Functions can write
    match /verificationCodes/{email} {
      allow read: if false; // No client-side reads
      allow write: if false; // Only Cloud Functions can write
    }
    
    // Users can read and write their own profile
    // Also allow writing to other users' profiles for friend operations
    // Face profiles collection
    match /faceProfiles/{userId} {
      // Users can only read and write their own face profile
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    match /users/{userId} {
      // Users can always read any user profile (for finding friends, etc.)
      allow read: if request.auth != null;
      
      // Users can write to their own profile
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // Allow updating other users' friends array for friend operations
      allow update: if request.auth != null && 
        // Only allow updating the friends field (and updatedAt)
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['friends', 'updatedAt']) &&
        (
          // Allow adding the current user to another user's friends list (for accepting requests)
          (request.auth.uid in request.resource.data.friends && 
           !(request.auth.uid in resource.data.friends)) ||
          // Allow removing the current user from another user's friends list (for removing friendships)
          (!(request.auth.uid in request.resource.data.friends) && 
           request.auth.uid in resource.data.friends)
        );
    }
    
    // Friend requests collection
    match /friendRequests/{requestId} {
      // Users can read friend requests sent to them or by them
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.to || request.auth.uid == resource.data.from);
      
      // Users can create friend requests where they are the sender
      allow create: if request.auth != null && request.auth.uid == request.resource.data.from;
      
      // Users can delete friend requests sent to them (for accepting/rejecting)
      allow delete: if request.auth != null && request.auth.uid == resource.data.to;
    }
    
    // Trip invites collection
    match /tripInvites/{inviteId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.inviteeUid || request.auth.uid == resource.data.inviterUid);
      
      allow create: if request.auth != null && request.auth.uid == request.resource.data.inviterUid;
      
      allow update, delete: if request.auth != null && 
        (request.auth.uid == resource.data.inviteeUid || request.auth.uid == resource.data.inviterUid);
    }
    
    // Trips rules
    match /trips/{tripId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.createdBy;
      allow update: if request.auth != null && request.auth.uid in resource.data.members;
      allow delete: if request.auth != null && request.auth.uid == resource.data.createdBy;
    }
    
    // Photos collection
    match /photos/{photoId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uploadedBy;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.uploadedBy;
    }
  }
}