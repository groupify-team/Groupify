rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Verification codes collection - only Cloud Functions can write
    match /verificationCodes/{email} {
      allow read: if false; // No client-side reads
      allow write: if false; // Only Cloud Functions can write
    }
    
    // Face profiles collection
    match /faceProfiles/{userId} {
      // Users can only read and write their own face profile
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Users collection - FIXED to allow document creation during signup
    match /users/{userId} {
      // Users can always read any user profile (for finding friends, etc.)
      allow read: if request.auth != null;
      
      // FIXED: Allow users to CREATE their own profile during signup
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // Users can update their own profile
      allow update: if request.auth != null && request.auth.uid == userId;
      
      // Allow updating other users' friends array (for accepting friend requests)
      allow update: if request.auth != null && 
        // Only allow updating the friends field
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['friends']) &&
        // Only allow adding the current user to another user's friends list
        request.auth.uid in request.resource.data.friends &&
        // Only if the current user is not already in the friends list
        !(request.auth.uid in resource.data.friends);
      
      // Users can delete their own profile
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Friend requests collection
    match /friendRequests/{requestId} {
      // Users can read friend requests sent to them or by them
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.to || request.auth.uid == resource.data.from);
      
      // Users can create friend requests where they are the sender
      allow create: if request.auth != null && request.auth.uid == request.resource.data.from;
      
      // Users can delete friend requests sent to them (for accepting/rejecting)
      allow delete: if request.auth != null && request.auth.uid == resource.data.to;
    }
    
    // Trip invites collection
    match /tripInvites/{inviteId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.inviteeUid || request.auth.uid == resource.data.inviterUid);
      
      allow create: if request.auth != null && request.auth.uid == request.resource.data.inviterUid;
      
      allow update, delete: if request.auth != null && 
        (request.auth.uid == resource.data.inviteeUid || request.auth.uid == resource.data.inviterUid);
    }
    
    // Trips rules
    match /trips/{tripId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.createdBy;
      allow update: if request.auth != null && request.auth.uid in resource.data.members;
      allow delete: if request.auth != null && request.auth.uid == resource.data.createdBy;
    }
    
    // Photos collection
    match /photos/{photoId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uploadedBy;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.uploadedBy;
    }
  }
}